/* Grant Harrison and Gabe Heim
 * 
 * Machine Problem 1
 *
 * CS 3050 
 *
 * This program runs in linear time because my insert function is dependent
 * on the number of Vertices and the number of Edges and my sorting function is
 * the one you gave us sudo-code for in class which runs in linear time depending 
 * on the number of Edges and Vertices so those together give you an overall run
 * time of O(|v|+|E|) which is linear.
 */

#include<stdio.h>
#include<stdlib.h>

struct Node
{
	int visit;
    int data;
    struct Node *next;
};

struct adjList
{
    int v;
    struct Node *array;
};

FILE *fp;

struct Node *CreateNode(int);
struct adjList *CreateAdjList(int);
void CreateAdj(struct adjList*, int, int);
void printAdj(struct adjList*);
void freeList(struct adjList*);
struct adjList *SortAdjList(struct adjList*);
void CreateAdjTranspose(struct adjList*, int, int);
void DFS(struct adjList*, int, int*, int*);
void DFS_Untransposed(int, struct adjList*, int*, int*);
void DFSt(struct adjList*, int, int*, int*, int*);
void DFS_Transposed(struct adjList*, int, int*, int*); 

int main(void)
{
    struct adjList *list, *listT;
    int s, d, q = 0;

    fp = fopen("mp2.txt", "r");
    while (fscanf(fp, "%d %d", &s, &d) != EOF)
    {
		if(q < s)
		{
			q = s;
		}
		if(q < d)
		{
			q = d;
		}
    }
    q++;

    fclose(fp);

    list = CreateAdjList(q);
	listT = CreateAdjList(q);

    fp = fopen("mp2.txt", "r");
    while (fscanf(fp, "%d %d", &s, &d) != EOF)
    {
		CreateAdj(list, s, d);
		CreateAdjTranspose(listT, s, d);
    }
	int L[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
	int compnent[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
	int n[] = {0};
	int comp[] = {0};

    DFS(list, list->v, n, L); 
	DFSt(list, list->v, comp, L, compnent);
    printAdj(list);
	printf("\n");
	printAdj(listT);
    freeList(list);

    fclose(fp);

    return 0;
}

struct Node *CreateNode(int x)
{
    struct Node *q = (struct Node*)malloc(sizeof(struct Node));
	q->visit = 0;
    q->data = x;
    q->next = NULL;
    return q;
}

struct adjList *CreateAdjList(int z)
{
    int i;
    struct adjList *p = (struct adjList*)malloc(sizeof(struct adjList));

    p->v = z;
    p->array = (struct Node*)malloc(sizeof(struct Node)*z);

    for (i=0; i < z; i++)
    {
	p->array[i].next = NULL;
    }

    return p;
}

void CreateAdj(struct adjList *list, int s, int d)
{
    struct Node *t1;

    t1 = CreateNode(d);
    t1->next = list->array[s].next;
    list->array[s].next = t1;
}

void printAdj(struct adjList *list)
{
    int i, j;
    j = 0;

    for (i=0; i < (list->v); i++)
    {
	struct Node *q = list->array[i].next;

	printf("\n %d: ", j);

	while (q != NULL)
	{
	    printf(" -> %d", q->data);
	    q = q->next;
	}
	j++;
	printf("\n");
    }
} 

void freeList(struct adjList *list)
{
    if (list == NULL)
    {
        printf("Nothing to free.\n");
        return;
    }

    for (int i=0; i < (list->v); i++)
    {
	free(list->array[i].next);
    }
    
    free(list);

}

void CreateAdjTranspose(struct adjList *list, int s, int d)
{
	struct Node *t2;

	t2 = CreateNode(s);
    t2->next = list->array[d].next;
    list->array[d].next = t2;
}

void DFS(struct adjList *list, int v, int n[], int L[])
{
//	printf("Made it to DFS\n");

    for(int i = 0; i < v; i++)
    {
        list->array[i].visit = 0;
    }
    n[1] = *(L + 1);
//	printf("HOPE %d\n", n[1]);

    for(int j = 0; j < (list->v); j++)
    {	
//		printf("Made it to for loop\n");
        if(list->array[j].visit == 0)
        {
			printf("OUT\n");
            DFS_Untransposed(j, list, n, L);
        }
    }
}

void DFS_Untransposed(int u, struct adjList *list, int n[], int L[])
{
    list->array[u].visit = 1;
	struct Node *q = list->array[u].next;

    while (q != NULL)
    {

        if (q->visit == 0)
        {
			printf("IN\n");
            DFS_Untransposed(list->array[u].next->data, list, n, L);
        }
        q = q->next;

    }
    n[1] = n[1] - 1;
    L[n[1]] = u;
//	printf("%d\n", n[1]);
}

void DFSt(struct adjList *list, int v, int comp[], int L[], int component[])
{

    for(int i = 0; i < v; i++)
    {
        list->array[i].visit = 0;
    }
    comp[1] = 0;


    for(int j = 0; j < v; j++)
    {
        list->array[j].visit = L[j];

        if (list->array[j].visit == 0)
        {
			printf("DFS Occured\n");
            comp[1] = comp[1] + 1;
            DFS_Transposed(list, j, comp, component);
        }
    }
}

void DFS_Transposed(struct adjList *list, int u, int comp[], int component[])
{
    list->array[u].visit = 1;
    component[u] = comp[1];

    while (list->array[u].next != NULL)
    {
        if (list->array[u].visit == 0)
        {
            DFS_Transposed(list, list->array[u].data, comp, component);
        }
    }
}
